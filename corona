#!/usr/bin/env bash

# csv structure: id,datum,vek,pohlavi,kraj_nuts_kod,okres_lau_kod,nakaza_v_zahranici,nakaza_zeme_csu_kod,reportovano_khs

OS=

if [[ "$OSTYPE" == "linux-gnu" ]]; then
  OS="linux"
elif [[ "$OSTYPE" == "darwin"* ]]; then
  OS="mac"
elif [[ "$OSTYPE" == "cygwin" ]]; then
  OS="cygwin"
elif [[ "$OSTYPE" == "msys" ]]; then
  OS="msys"
elif [[ "$OSTYPE" == "win32" ]]; then
  OS="win"
elif [[ "$OSTYPE" == "freebsd"* ]]; then
  OS="freebsd"
else
  echo "Unknown OS: $OSTYPE" >&2
  exit 1
fi

DATE_CMD=

if [[ "$OS" = "mac" ]]; then
  DATE_CMD="gdate"
else
  DATE_CMD="date"
fi

AFTER_DATE=
BEFORE_DATE=
GENDER=
COMMAND="merge"
FILES=()
GZ_ENABLED=0
GZ_FILES=()
HISTOGRAM_ENABLED=0
HISTOGRAM_WIDTH=

ALLOWED_COMMANDS=("infected" "merge" "gender" "age" "daily" "monthly" "yearly" "countries" "districts" "regions")
HISTOGRAM_COMMANDS=("gender" "age" "daily" "monthly" "yearly" "countries" "districts" "regions")
HISTOGRAM_WIDTHS=(100000 10000 500 10000 100000 100 1000 10000)
ALLOWED_GENDERS=("M" "Z")
AGE_GROUPS=("0-5" "6-15" "16-25" "26-35" "36-45" "46-55" "56-65" "66-75" "76-85" "86-95" "96-105" "106-1000")

HEADER="id,datum,vek,pohlavi,kraj_nuts_kod,okres_lau_kod,nakaza_v_zahranici,nakaza_zeme_csu_kod,reportovano_khs"

usage() {
  echo "Usage: $0 [-h] [FILTERS] [COMMAND] [LOG [LOG2 [...]]"
  echo "  -h      display this help and exit"
  echo "  FILTERS are one or more of:"
  echo "    -a DATETIME     use data after date"
  echo "    -b DATETIME     use data before date"
  echo "    -g GENDER       use data with gender [Z/M]"
  echo "  COMMAND is one of:"
  echo "    infected        count the number of infected people"
  echo "    merge           merge some files to one"
  echo "    gender          print statistics about infected people grouping by gender"
  echo "    age             print statistics about infected people grouping by age"
  echo "    daily           print statistics about infected people grouping by day"
  echo "    monthly         print statistics about infected people grouping by month"
  echo "    yearly          print statistics about infected people grouping by year"
  echo "    countries       print statistics about infected people grouping by country"
  echo "    districts       print statistics about infected people grouping by district"
  echo "    regions         print statistics about infected people grouping by region"
  echo "  LOG is one or more csv data files"
  echo "    Data scheme:"
  echo "      id                  unique identifier"
  echo "      datum               date of the report. Format: YYYY-MM-DD"
  echo "      vek                 age of the person"
  echo "      pohlavi             gender of the person. Format: M / Z"
  echo "      kraj_nuts_kod       region where the infection was discovered"
  echo "      okres_lau_kod       district  where the infection was discovered"
  echo "      nakaza_v_zahranici  whether the infection was reported in the foreign country [1] or not [0]"
  echo "      nakaza_zeme_csu_kod country where the infection appeared (only for foreign infections)"
  echo "      reportovano_khs     whether the infection was reported by the health service [1] or not [0]"
}

contains() {
  local e match="$1"
  shift
  for e; do [[ "$e" == "$match" ]] && return 0; done
  return 1
}

index() {
  local i=0
  for element in "${@:2}"; do
    [[ "$element" == "$1" ]] && echo "$i" && return
    ((i++))
  done
  echo -1
}

# parse arguments
while [ "$#" -gt 0 ]; do
  case "$1" in
  -h | --help)
    usage
    exit 0
    ;;
  -a)
    AFTER_DATE="$2"
    shift 2
    ;;
  -b)
    BEFORE_DATE="$2"
    shift 2
    ;;
  -g)
    GENDER="$2"
    shift 2
    ;;
  -s)
    HISTOGRAM_ENABLED=1
    if [[ $2 =~ [0-9]+$ ]]; then
      HISTOGRAM_WIDTH=$2
      shift 2
    else
      shift
    fi
    ;;
  *)
    # check if command is allowed and set it
    if contains "$1" "${ALLOWED_COMMANDS[@]}"; then
      COMMAND="$1"
      shift
    fi

    if [ -z "$1" ]; then
      FILES+=("/dev/stdin")
    else
      while :; do
        if [ -f "$1" ]; then
          if [[ "$1" =~ \.gz$ || "$1" =~ \.bz2$ ]]; then
            GZ_ENABLED=1
            GZ_FILES+=("$1")
          else
            FILES+=("$1")
          fi
        fi
        shift

        if [ -z "$1" ]; then
          break
        fi
      done
    fi
    ;;
  esac
done

if [[ ${#FILES[@]} -eq 0 ]] && [[ "${GZ_ENABLED}" -eq 0 ]]; then
  FILES+=("/dev/stdin")
fi

if [ -n "$AFTER_DATE" ] && [ -n "$BEFORE_DATE" ] && [ "$($DATE_CMD -d "$AFTER_DATE" +%s)" -gt "$($DATE_CMD -d "$BEFORE_DATE" +%s)" ]; then
  echo 'Before date must be before after date' >&2
  exit 1
fi

if [ -n "$GENDER" ]; then
  if ! contains "${GENDER}" "${ALLOWED_GENDERS[@]}"; then
    usage
    exit 0
  fi
fi

process_files() {
  local filename extension data=""

  for FILE in "${FILES[@]}"; do
    data+=$(sed <"$FILE" '/^\r$/d' | sed '/./!d' | tail -n +2)
    data+=$'\n'
  done

  if [[ "$GZ_ENABLED" -eq 1 ]]; then
    for FILE in "${GZ_FILES[@]}"; do
      filename=$(basename "$FILE")
      extension="${filename##*.}"

      if [[ "$extension" == "gz" ]]; then
        data+=$(gzip <"$FILE" -d | sed '/^\r$/d' | sed '/./!d' | tail -n +2)
      elif [[ "$extension" == "bz2" ]]; then
        data+=$(bzip2 <"$FILE" -d | sed '/^\r$/d' | sed '/./!d' | tail -n +2)
      fi
      data+=$'\n'
    done
  fi

  data=$(echo "$data" | sed '/^\r$/d' | sed '/./!d')

  echo "$data"
}

validate_data() {
  local data="$1"

  data=$(echo "$data" | sed -r '/^\s*$/d')
  data=$(echo "$data" | awk -F '[[:blank:]]*,[[:blank:]]*' -v OFS=, '{gsub(/^[[:blank:]]+|[[:blank:]]+$/, ""); $1=$1} 1')

  data=$(echo "$data" | awk -F "," '{
    if ($2 == "") {
      print $0
    } else {
      if (split($2, a, "-") == 3) {
        year=a[1]
        month=a[2]
        day=a[3]
      } else {
        printf "Invalid date: %s\n", $0 >> "/dev/stderr"
      }

      if (day < 1 || day > 31) {
        printf "Invalid date: %s\n", $0 >> "/dev/stderr"
      } else if (month < 1 || month > 12) {
        printf "Invalid date: %s\n", $0 >> "/dev/stderr"
      } else if (year < 0) {
        printf "Invalid date: %s\n", $0 >> "/dev/stderr"
      } else if (day == 31 && (month == 4 || month == 6 || month == 9 || month == 11)) {
        printf "Invalid date: %s\n", $0 >> "/dev/stderr"
      } else if (day >= 30 && month == 2) {
        printf "Invalid date: %s\n", $0 >> "/dev/stderr"
      } else if (day == 29 && month == 2 && (year % 4 != 0 || (year % 100 == 0 && year % 400 != 0))) {
        printf "Invalid date: %s\n", $0 >> "/dev/stderr"
      } else {
        print $0
      }
    }
  }')

  data=$(echo "$data" | awk -F "," '{
    if ($3 == "" || $3 ~ /^[0-9]+$/) {
      print $0
    } else {
      printf "Invalid age: %s\n", $0 >> "/dev/stderr"
    }
  }')

  echo "$data"
}

filter_data() {
  local data="$1"

  data=$(echo "$data" | awk -F "," -v after="$AFTER_DATE" '{if(after != ""){if(after <= $2){print}}else{print}}')
  data=$(echo "$data" | awk -F "," -v before="$BEFORE_DATE" '{if(before != ""){if(before >= $2){print}}else{print}}')
  data=$(echo "$data" | awk -F "," -v gender="$GENDER" '{if(gender != ""){if(gender == $4){print}}else{print}}')
  echo "$data"
}

run_command() {
  local data="$1"

  if [[ -n "$COMMAND" ]]; then
    case "$COMMAND" in
    infected)
      process_infected "$data"
      ;;
    merge)
      process_merge "$data"
      ;;
    gender)
      process_gender "$data"
      ;;
    age)
      process_age "$data"
      ;;
    daily)
      process_daily "$data"
      ;;
    monthly)
      process_monthly "$data"
      ;;
    yearly)
      process_yearly "$data"
      ;;
    countries)
      process_countries "$data"
      ;;
    districts)
      process_districts "$data"
      ;;
    regions)
      process_regions "$data"
      ;;
    esac
  fi
}

process_histogram() {
  local max max_signs sign_value data="$1"

  if ! contains "$COMMAND" "${HISTOGRAM_COMMANDS[@]}"; then
    echo "$data"
    return
  fi

  max=$(echo "$data" | awk -F ':' '{print $2}' | sort -n | tail -n 1)
  sign_value="${HISTOGRAM_WIDTHS[$(index "$COMMAND" "${HISTOGRAM_COMMANDS[@]}")]}"

  if [[ -n "$HISTOGRAM_WIDTH" ]]; then
    sign_value=$(echo "($max / $HISTOGRAM_WIDTH) / 1" | bc)
  fi

  max_signs=$(echo "($max / $sign_value) / 1" | bc)

  echo "$data" | awk -F ": " -v sign="$sign_value" -v m="$max_signs" 'BEGIN { s=sprintf(sprintf("%%%ds", m),""); gsub(/ /,"#",s) }
    {
      if (sign == 0)
        printf("%s:\n", $1);
     else
        printf("%s: %.*s\n", $1, int($2/sign), s);
    }'
}

process_infected() {
  local data="$1"

  awk -F "," 'END{print NR}' <<<"$data"
}

process_merge() {
  local data="$1"

  echo "$HEADER"
  echo "$data"
}

process_gender() {
  local data="$1"

  awk -F "," '{if($4 != ""){print $4}else{print "ZZZZZZZZ"}}' <<<"$data" | LC_ALL=C sort | uniq -c |
    awk -F " " '{print $2": " $1}' | sed -E "s/Z{8}/None/"
}

process_age() {
  local min_age max_age count data="$1"

  for i in "${AGE_GROUPS[@]}"; do
    min_age=$(awk -F "-" '{print $1}' <<<"$i")
    max_age=$(awk -F "-" '{print $2}' <<<"$i")

    count=$(awk -F "," -v min_age="$min_age" -v max_age="$max_age" \
      '{if($3 != ""){if($3 >= min_age && $3 <= max_age){print}}}' <<<"$data" | awk "END{print NR}")

    if [ "$i" != "106-1000" ]; then
      awk -F " " "{printf \"%-6s: %s\n\", \"$i\", \$1}" <<<"$count"
    else
      awk -F " " "{printf \"%-6s: %s\n\", \">105\", \$1}" <<<"$count"
    fi
  done

  awk -F "," '{if($3 == ""){print "None"}}' <<<"$data" | uniq -c | awk -F " " '{print "None  : " $1}'
}

process_daily() {
  local data="$1"

  echo "$data" | awk -F "," '{if($2 != ""){print $2}else{print "ZZZZZZZZ"}}' | LC_ALL=C sort |
    sed -E 's/([0-9]{4})-([0-9]{2})-([0-9]{2})/\1-\2-\3/g' | uniq -c | awk -F " " '{print $2": " $1}' | sed -E "s/Z{8}/None/"
}

process_monthly() {
  local data="$1"

  echo "$data" | awk -F "," '{if($2 != ""){print $2}else{print "ZZZZZZZZ"}}' | LC_ALL=C sort |
    sed -E 's/([0-9]{4})-([0-9]{2})-([0-9]{2})/\1-\2/g' | uniq -c | awk -F " " '{print $2": " $1}' | sed -E "s/Z{8}/None/"
}

process_yearly() {
  local data="$1"

  echo "$data" | awk -F "," '{if($2 != ""){print $2}else{print "ZZZZZZZZ"}}' | LC_ALL=C sort |
    sed -E 's/([0-9]{4})-([0-9]{2})-([0-9]{2})/\1/g' | uniq -c | awk -F " " '{print $2": " $1}' | sed -E "s/Z{8}/None/"
}

process_countries() {
  local data="$1"

  awk -F "," '{if($8 != ""){if($8 != "CZ"){print $8}}}' <<<"$data" |
    LC_ALL=C sort | uniq -c | awk -F " " '{print $2": " $1}'
}

process_districts() {
  local data="$1"

  awk -F "," '{if($6 != ""){print $6}else{print "ZZZZZZZZ"}}' <<<"$data" |
    LC_ALL=C sort | uniq -c | awk -F " " '{print $2": " $1}' | sed -E "s/Z{8}/None/"
}

process_regions() {
  local data="$1"

  awk -F "," '{if($5 != ""){print $5}else{print "ZZZZZZZZ"}}' <<<"$data" |
    LC_ALL=C sort | uniq -c | awk -F " " '{print $2": " $1}' | sed -E "s/Z{8}/None/"
}

csv_array="$(process_files)"
pre_validated_array=$csv_array
csv_array="$(validate_data "$csv_array" 2>/dev/null)"
csv_array="$(filter_data "$csv_array")"
csv_array="$(run_command "$csv_array")"
if [[ "$HISTOGRAM_ENABLED" -eq 1 ]]; then
  csv_array="$(process_histogram "$csv_array")"
fi
echo "$csv_array"
validate_data "$pre_validated_array" 1>/dev/null